/*
 * MolKeyoard, Copyright (C) 2001-2003 Samuel Rydh (samuel@ibrium.se)
 *
 */

#include "mol_config.h"
extern "C" {
#include <sys/systm.h>
}
#include "MolKeyboard.h"
#include <IOKit/hidsystem/IOHIDTypes.h>
#include <IOKit/IOLib.h>
#include <IOKit/IOWorkLoop.h>
#include "osi_calls.h"

#define super IOHIKeyboard
OSDefineMetaClassAndStructors( MolKeyboard, IOHIKeyboard );

bool
MolKeyboard::start( IOService *provider )
{
	if( !super::start(provider) )
		return false;

	_irq = IOInterruptEventSource::interruptEventSource( this, (IOInterruptEventSource::Action)&MolKeyboard::interrupt,
							     provider, 0 );
	if( !_irq ) {
		printm("MolKeyboard: no irq\n");
		return false;
	}
	getWorkLoop()->addEventSource( _irq );
	_irq->enable();

	return true;
}

void
MolKeyboard::interrupt( IOInterruptEventSource *sender, int count )
{
	AbsoluteTime time;
	int key;
	static int trans[] = { 
		// right shift -> left shift
		0x7b, 0x38,
		// arrow keys
		0x3b, 0x7b, 0x3c, 0x7c, 0x3d, 0x7d, 0x3e, 0x7e 
	};
	
	while( (key=OSI_GetAdbKey()) >=0 ) {
		unsigned int i;
		int k=(key & 0x7f);

		// Hack keycodes (not the perfect solution...)
		for( i=0; i<sizeof(trans)/sizeof(trans[0]) ; i+=2 )
			if( k == trans[i] ) {
				k = trans[i+1];
				break;
			}

		clock_get_uptime(&time);
		dispatchKeyboardEvent( k, /*down*/ (key & 0x80) ? 0:1, time );
	}
}

UInt32
MolKeyboard::deviceType( void )
{
	return 2;
}

UInt32
MolKeyboard::interfaceID( void )
{
	return NX_EVS_DEVICE_INTERFACE_ADB;
}

void
MolKeyboard::setAlphaLockFeedback(bool val)
{
}

void
MolKeyboard::setNumLockFeedback(bool val)
{
}

UInt32
MolKeyboard::maxKeyCodes()
{
	return 0x80;
}

const unsigned char *
MolKeyboard::defaultKeymapOfLength( UInt32 * length )
{
	// refere to IOHIKeyboardMapper::parseKeyMapping and ev_keymap.h
	static const unsigned char appleUSAKeyMap[] = {
		0x00,0x00,

		0x08,			//8 modifier keys
		0x00,0x01,0x39, 	//NX_MODIFIERKEY_ALPHALOCK
		0x01,0x01,0x38,		//NX_MODIFIERKEY_SHIFT virtual from KMAP
		0x02,0x01,0x36,		//NX_MODIFIERKEY_CONTROL (WAS: 0x02,0x01,0x3b)
		0x03,0x01,0x3a,		//NX_MODIFIERKEY_ALTERNATE
		0x04,0x01,0x37,		//NX_MODIFIERKEY_COMMAND
		0x05,0x15,		//NX_MODIFIERKEY_NUMERICPAD
		     0x52,0x41,0x4c,0x53,0x54,0x55,0x45,0x58,0x57,0x56,0x5b,0x5c,
		     0x43,0x4b,0x51,0x7b,0x7d,0x7e,0x7c,0x4e,0x59,  
		0x06,0x01,0x72,		//NX_MODIFIERKEY_HELP  7th modifier here
		0x07,0x01,0x3f,		//NX_MODIFIERKEY_SECONDARYFN 8th modifier

		// Key definitions
		0x7f,			// 127 key definitions
		0x0d,0x00,0x61,0x00,0x41,0x00,0x01,0x00,0x01,0x00,0xca,0x00,0xc7,0x00,0x01,0x00,0x01,	// a
		0x0d,0x00,0x73,0x00,0x53,0x00,0x13,0x00,0x13,0x00,0xfb,0x00,0xa7,0x00,0x13,0x00,0x13,	// s
		0x0d,0x00,0x64,0x00,0x44,0x00,0x04,0x00,0x04,0x01,0x44,0x01,0xb6,0x00,0x04,0x00,0x04,	// d
		0x0d,0x00,0x66,0x00,0x46,0x00,0x06,0x00,0x06,0x00,0xa6,0x01,0xac,0x00,0x06,0x00,0x06,	// f
		0x0d,0x00,0x68,0x00,0x48,0x00,0x08,0x00,0x08,0x00,0xe3,0x00,0xeb,0x00,0x00,0x18,0x00,	// h
		0x0d,0x00,0x67,0x00,0x47,0x00,0x07,0x00,0x07,0x00,0xf1,0x00,0xe1,0x00,0x07,0x00,0x07,	// g
		0x0d,0x00,0x7a,0x00,0x5a,0x00,0x1a,0x00,0x1a,0x00,0xcf,0x01,0x57,0x00,0x1a,0x00,0x1a,	
		0x0d,0x00,0x78,0x00,0x58,0x00,0x18,0x00,0x18,0x01,0xb4,0x01,0xce,0x00,0x18,0x00,0x18,
		0x0d,0x00,0x63,0x00,0x43,0x00,0x03,0x00,0x03,0x01,0xe3,0x01,0xd3,0x00,0x03,0x00,0x03,
		0x0d,0x00,0x76,0x00,0x56,0x00,0x16,0x00,0x16,0x01,0xd6,0x01,0xe0,0x00,0x16,0x00,0x16,
		0x02,0x00,0x3c,0x00,0x3e,
		0x0d,0x00,0x62,0x00,0x42,0x00,0x02,0x00,0x02,0x01,0xe5,0x01,0xf2,0x00,0x02,0x00,0x02,	// b
		0x0d,0x00,0x71,0x00,0x51,0x00,0x11,0x00,0x11,0x00,0xfa,0x00,0xea,0x00,0x11,0x00,0x11,
		0x0d,0x00,0x77,0x00,0x57,0x00,0x17,0x00,0x17,0x01,0xc8,0x01,0xc7,0x00,0x17,0x00,0x17,
		0x0d,0x00,0x65,0x00,0x45,0x00,0x05,0x00,0x05,0x00,0xc2,0x00,0xc5,0x00,0x05,0x00,0x05,
		0x0d,0x00,0x72,0x00,0x52,0x00,0x12,0x00,0x12,0x01,0xe2,0x01,0xd2,0x00,0x12,0x00,0x12,
		0x0d,0x00,0x79,0x00,0x59,0x00,0x19,0x00,0x19,0x00,0xa5,0x01,0xdb,0x00,0x19,0x00,0x19,
		0x0d,0x00,0x74,0x00,0x54,0x00,0x14,0x00,0x14,0x01,0xe4,0x01,0xd4,0x00,0x14,0x00,0x14,
		0x0a,0x00,0x31,0x00,0x21,0x01,0xad,0x00,0xa1,						// 1
		0x0e,0x00,0x32,0x00,0x40,0x00,0x32,0x00,0x00,0x00,0xb2,0x00,0xb3,0x00,0x00,0x00,0x00,	// 2
		0x0a,0x00,0x33,0x00,0x23,0x00,0xa3,0x01,0xba,						// 3
		0x0a,0x00,0x34,0x00,0x24,0x00,0xa2,0x00,0xa8,						// 4
		0x0e,0x00,0x36,0x00,0x5e,0x00,0x36,0x00,0x1e,0x00,0xb6,0x00,0xc3,0x00,0x1e,0x00,0x1e,	// 6
		0x0a,0x00,0x35,0x00,0x25,0x01,0xa5,0x00,0xbd,						// 5
		0x0a,0x00,0x3d,0x00,0x2b,0x01,0xb9,0x01,0xb1,
		0x0a,0x00,0x39,0x00,0x28,0x00,0xac,0x00,0xab,
		0x0a,0x00,0x37,0x00,0x26,0x01,0xb0,0x01,0xab,
		0x0e,0x00,0x2d,0x00,0x5f,0x00,0x1f,0x00,0x1f,0x00,0xb1,0x00,0xd0,0x00,0x1f,0x00,0x1f,
		0x0a,0x00,0x38,0x00,0x2a,0x00,0xb7,0x00,0xb4,
		0x0a,0x00,0x30,0x00,0x29,0x00,0xad,0x00,0xbb,
		0x0e,0x00,0x5d,0x00,0x7d,0x00,0x1d,0x00,0x1d,0x00,0x27,0x00,0xba,0x00,0x1d,0x00,0x1d,
		0x0d,0x00,0x6f,0x00,0x4f,0x00,0x0f,0x00,0x0f,0x00,0xf9,0x00,0xe9,0x00,0x0f,0x00,0x0f,
		0x0d,0x00,0x75,0x00,0x55,0x00,0x15,0x00,0x15,0x00,0xc8,0x00,0xcd,0x00,0x15,0x00,0x15,
		0x0e,0x00,0x5b,0x00,0x7b,0x00,0x1b,0x00,0x1b,0x00,0x60,0x00,0xaa,0x00,0x1b,0x00,0x1b,
		0x0d,0x00,0x69,0x00,0x49,0x00,0x09,0x00,0x09,0x00,0xc1,0x00,0xf5,0x00,0x09,0x00,0x09,
		0x0d,0x00,0x70,0x00,0x50,0x00,0x10,0x00,0x10,0x01,0x70,0x01,0x50,0x00,0x10,0x00,0x10,
		0x10,0x00,0x0d,0x00,0x03,
		0x0d,0x00,0x6c,0x00,0x4c,0x00,0x0c,0x00,0x0c,0x00,0xf8,0x00,0xe8,0x00,0x0c,0x00,0x0c,
		0x0d,0x00,0x6a,0x00,0x4a,0x00,0x0a,0x00,0x0a,0x00,0xc6,0x00,0xae,0x00,0x0a,0x00,0x0a,
		0x0a,0x00,0x27,0x00,0x22,0x00,0xa9,0x01,0xae,
		0x0d,0x00,0x6b,0x00,0x4b,0x00,0x0b,0x00,0x0b,0x00,0xce,0x00,0xaf,0x00,0x0b,0x00,0x0b,
		0x0a,0x00,0x3b,0x00,0x3a,0x01,0xb2,0x01,0xa2,
		0x0e,0x00,0x5c,0x00,0x7c,0x00,0x1c,0x00,0x1c,0x00,0xe3,0x00,0xeb,0x00,0x1c,0x00,0x1c,
		0x0a,0x00,0x2c,0x00,0x3c,0x00,0xcb,0x01,0xa3,
		0x0a,0x00,0x2f,0x00,0x3f,0x01,0xb8,0x00,0xbf,
		0x0d,0x00,0x6e,0x00,0x4e,0x00,0x0e,0x00,0x0e,0x00,0xc4,0x01,0xaf,0x00,0x0e,0x00,0x0e,
		0x0d,0x00,0x6d,0x00,0x4d,0x00,0x0d,0x00,0x0d,0x01,0x6d,0x01,0xd8,0x00,0x0d,0x00,0x0d,
		0x0a,0x00,0x2e,0x00,0x3e,0x00,0xbc,0x01,0xb3,
		0x02,0x00,0x09,0x00,0x19,
		0x0c,0x00,0x20,0x00,0x00,0x00,0x80,0x00,0x00,
		0x0a,0x00,0x60,0x00,0x7e,0x00,0x60,0x01,0xbb,
		0x02,0x00,0x7f,0x00,0x08,
		0xff,
		0x02,0x00,0x1b,0x00,0x7e,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff, 
		0xff, 
		0xff,
		0xff,
		0xff,
		0x00,0x00,0x2e,
		0xff,
		0x00,0x00,0x2a,
		0xff,
		0x00,0x00,0x2b,
		0xff,
		0x00,0x00,0x1b,
		0xff,
		0xff,
		0xff,
		0x0e,0x00,0x2f,0x00,0x5c,0x00,0x2f,0x00,0x1c,0x00,0x2f,0x00,0x5c,0x00,0x00,0x0a,0x00,
		0x00,0x00,0x0d,
		0xff,
		0x00,0x00,0x2d,
		0xff,
		0xff,
		0x0e,0x00,0x3d,0x00,0x7c,0x00,0x3d,0x00,0x1c,0x00,0x3d,0x00,0x7c,0x00,0x00,0x18,0x46,
		0x00,0x00,0x30,
		0x00,0x00,0x31,
		0x00,0x00,0x32,
		0x00,0x00,0x33,
		0x00,0x00,0x34,
		0x00,0x00,0x35,
		0x00,0x00,0x36,
		0x00,0x00,0x37,
		0xff,
		0x00,0x00,0x38,
		0x00,0x00,0x39,
		0xff,
		0xff,
		0xff,
		0x00,0xfe,0x24,
		0x00,0xfe,0x25,
		0x00,0xfe,0x26,
		0x00,0xfe,0x22,
		0x00,0xfe,0x27,
		0x00,0xfe,0x28,
		0xff,
		0x00,0xfe,0x2a,
		0xff,
		0x00,0xfe,0x32,
		0xff,
		0x00,0xfe,0x33,
		0xff,
		0x00,0xfe,0x29,
		0xff,
		0x00,0xfe,0x2b,
		0xff,
		0x00,0xfe,0x34,
		0xff,
		0x00,0xfe,0x2e,
		0x00,0xfe,0x30,
		0x00,0xfe,0x2d,
		0x00,0xfe,0x23,
		0x00,0xfe,0x2f,
		0x00,0xfe,0x21,
		0x00,0xfe,0x31,
		0x00,0xfe,0x20,
		0x00,0x01,0xac,	//ADB=0x7b is left arrow, Added following 4 lines to fix wakeup on PowerBooks. 
		0x00,0x01,0xae, //ADB=0x7c is right arrow
		0x00,0x01,0xaf, //ADB=0x7d is down arrow. 
		0x00,0x01,0xad, //ADB=0x7e is up arrow

		// Sequence defs
		0x0f,
		0x02,0xff,0x04,0x00,0x31,
		0x02,0xff,0x04,0x00,0x32,
		0x02,0xff,0x04,0x00,0x33,
		0x02,0xff,0x04,0x00,0x34,
		0x02,0xff,0x04,0x00,0x35,
		0x02,0xff,0x04,0x00,0x36,
		0x02,0xff,0x04,0x00,0x37,
		0x02,0xff,0x04,0x00,0x38,
		0x02,0xff,0x04,0x00,0x39,
		0x02,0xff,0x04,0x00,0x30,
		0x02,0xff,0x04,0x00,0x2d,
		0x02,0xff,0x04,0x00,0x3d,
		0x02,0xff,0x04,0x00,0x70,
		0x02,0xff,0x04,0x00,0x5d,
		0x02,0xff,0x04,0x00,0x5b,

		// Special device keys
		0x06, 		// following are 6 special keys
		0x05,0x72,	//NX_KEYTYPE_HELP is 5, ADB code is 0x72
		0x06,0x7f,	//NX_POWER_KEY is 6, ADB code is 0x7f
		0x07,0x4a,	//NX_KEYTYPE_MUTE is 7, ADB code is 0x4a
		0x08,0x3e,	//NX_UP_ARROW_KEY is 8, ADB is 0x3e raw, 7e virtual (KMAP)
		0x09,0x3d,	//NX_DOWN_ARROW_KEY is 9, ADB is 0x3d raw, 7d virtual
		0x0a,0x47	//NX_KEYTYPE_NUM_LOCK is 10, ADB combines with CLEAR key for numlock
	};

	*length = sizeof(appleUSAKeyMap);
	return appleUSAKeyMap;
}
